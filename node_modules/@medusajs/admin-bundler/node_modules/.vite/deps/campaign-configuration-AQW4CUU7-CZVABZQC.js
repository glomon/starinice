import "./chunk-EGRHWZRV.js";
import {
  KeyboundForm
} from "./chunk-H3QLNIQZ.js";
import {
  RouteDrawer,
  useRouteModal
} from "./chunk-LJDFKMOG.js";
import {
  t
} from "./chunk-OHTJOGDW.js";
import {
  z
} from "./chunk-UESAM5J2.js";
import {
  useCampaign,
  useUpdateCampaign
} from "./chunk-2HIWKKOO.js";
import "./chunk-KZEAZRGV.js";
import "./chunk-S7K3MYSB.js";
import {
  Form,
  useForm
} from "./chunk-IW7FFK4D.js";
import {
  useTranslation
} from "./chunk-FSQ44SVG.js";
import "./chunk-WPKD3INM.js";
import {
  useParams
} from "./chunk-2WRJVAK6.js";
import {
  Button,
  DatePicker,
  Heading,
  toast
} from "./chunk-CVCKA5P5.js";
import "./chunk-NOBDUI2K.js";
import "./chunk-VARPEBF3.js";
import "./chunk-FZZ47AFW.js";
import {
  require_jsx_runtime
} from "./chunk-JURSM5AU.js";
import "./chunk-ZP5CUZDC.js";
import "./chunk-HSPO6A2T.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@medusajs/dashboard/dist/campaign-configuration-AQW4CUU7.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var CampaignConfigurationSchema = z.object({
  starts_at: z.date().nullable(),
  ends_at: z.date().nullable()
});
var CampaignConfigurationForm = ({
  campaign
}) => {
  const { t: t2 } = useTranslation();
  const { handleSuccess } = useRouteModal();
  const form = useForm({
    defaultValues: {
      starts_at: campaign.starts_at ? new Date(campaign.starts_at) : void 0,
      ends_at: campaign.ends_at ? new Date(campaign.ends_at) : void 0
    },
    resolver: t(CampaignConfigurationSchema)
  });
  const { mutateAsync, isPending } = useUpdateCampaign(campaign.id);
  const handleSubmit = form.handleSubmit(async (data) => {
    await mutateAsync(
      {
        starts_at: data.starts_at || null,
        ends_at: data.ends_at || null
      },
      {
        onSuccess: ({ campaign: campaign2 }) => {
          toast.success(
            t2("campaigns.configuration.edit.successToast", {
              name: campaign2.name
            })
          );
          handleSuccess();
        },
        onError: (error) => {
          toast.error(error.message);
        }
      }
    );
  });
  return (0, import_jsx_runtime.jsx)(RouteDrawer.Form, { form, children: (0, import_jsx_runtime.jsxs)(KeyboundForm, { onSubmit: handleSubmit, className: "flex flex-1 flex-col", children: [
    (0, import_jsx_runtime.jsx)(RouteDrawer.Body, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex flex-col gap-y-4", children: [
      (0, import_jsx_runtime.jsx)(
        Form.Field,
        {
          control: form.control,
          name: "starts_at",
          render: ({ field }) => {
            return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
              (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("campaigns.fields.start_date") }),
              (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(
                DatePicker,
                {
                  granularity: "minute",
                  hourCycle: 12,
                  shouldCloseOnSelect: false,
                  ...field
                }
              ) }),
              (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
            ] });
          }
        }
      ),
      (0, import_jsx_runtime.jsx)(
        Form.Field,
        {
          control: form.control,
          name: "ends_at",
          render: ({ field }) => {
            return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
              (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("campaigns.fields.end_date") }),
              (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(
                DatePicker,
                {
                  granularity: "minute",
                  shouldCloseOnSelect: false,
                  ...field
                }
              ) }),
              (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
            ] });
          }
        }
      )
    ] }) }),
    (0, import_jsx_runtime.jsx)(RouteDrawer.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
      (0, import_jsx_runtime.jsx)(RouteDrawer.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { variant: "secondary", size: "small", children: t2("actions.cancel") }) }),
      (0, import_jsx_runtime.jsx)(
        Button,
        {
          isLoading: isPending,
          type: "submit",
          variant: "primary",
          size: "small",
          children: t2("actions.save")
        }
      )
    ] }) })
  ] }) });
};
var CampaignConfiguration = () => {
  const { t: t2 } = useTranslation();
  const { id } = useParams();
  const { campaign, isLoading, isError, error } = useCampaign(id);
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime2.jsxs)(RouteDrawer, { children: [
    (0, import_jsx_runtime2.jsxs)(RouteDrawer.Header, { children: [
      (0, import_jsx_runtime2.jsx)(RouteDrawer.Title, { asChild: true, children: (0, import_jsx_runtime2.jsx)(Heading, { children: t2("campaigns.configuration.edit.header") }) }),
      (0, import_jsx_runtime2.jsx)(RouteDrawer.Description, { className: "sr-only", children: t2("campaigns.configuration.edit.description") })
    ] }),
    !isLoading && campaign && (0, import_jsx_runtime2.jsx)(CampaignConfigurationForm, { campaign })
  ] });
};
export {
  CampaignConfiguration as Component
};
//# sourceMappingURL=campaign-configuration-AQW4CUU7-CZVABZQC.js.map
