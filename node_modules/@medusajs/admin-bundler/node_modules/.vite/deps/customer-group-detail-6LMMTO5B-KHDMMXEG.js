import {
  useCustomerTableColumns
} from "./chunk-HCMZ6YQ6.js";
import "./chunk-4TMSYWXC.js";
import "./chunk-QZM6AV7R.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-Z7JNCSGP.js";
import {
  _DataTable,
  useDataTable
} from "./chunk-GYOCVU6S.js";
import "./chunk-OG2R6DAC.js";
import "./chunk-A2UEZFN2.js";
import "./chunk-K7PZIJFD.js";
import {
  SingleColumnPage
} from "./chunk-VTZEQD5S.js";
import {
  useCustomerTableQuery
} from "./chunk-YTFQR32Z.js";
import {
  useCustomerTableFilters
} from "./chunk-BCU7AS76.js";
import "./chunk-GZ6THSPN.js";
import "./chunk-ZXVW7VE7.js";
import "./chunk-X5HQAIV7.js";
import "./chunk-LNH4KKOB.js";
import "./chunk-PWUDRQ7V.js";
import {
  SingleColumnPageSkeleton
} from "./chunk-YY5JNEZV.js";
import {
  useDashboardExtension
} from "./chunk-MBDSCVP3.js";
import "./chunk-TDDTFEZU.js";
import "./chunk-OHTJOGDW.js";
import "./chunk-UESAM5J2.js";
import {
  ActionMenu
} from "./chunk-EX7ZLLWN.js";
import "./chunk-FURIVWWB.js";
import "./chunk-R435OOKX.js";
import "./chunk-O2SHVWJ7.js";
import "./chunk-QJMXPFFL.js";
import "./chunk-LOUCI2Q4.js";
import "./chunk-XAMQAMS2.js";
import "./chunk-ROURSU5C.js";
import "./chunk-24AYSH5Z.js";
import "./chunk-Y7E3AKSU.js";
import "./chunk-P42N2CVA.js";
import "./chunk-JQ6JHQYV.js";
import "./chunk-2NKA7EPO.js";
import "./chunk-H5XEUC57.js";
import "./chunk-CD3UWPTR.js";
import "./chunk-JC3AABXJ.js";
import "./chunk-UVYZXJCZ.js";
import "./chunk-AJKOBEGU.js";
import "./chunk-EFTJBWZH.js";
import "./chunk-KKXPEDCK.js";
import "./chunk-QRVRA7WJ.js";
import "./chunk-F6XLLSP3.js";
import {
  useCustomerGroup,
  useCustomers,
  useDeleteCustomerGroup,
  useRemoveCustomersFromGroup
} from "./chunk-QREZ47SH.js";
import "./chunk-AFW6PFDV.js";
import "./chunk-2HIWKKOO.js";
import "./chunk-BI7OZFOQ.js";
import "./chunk-3CFLC4RY.js";
import "./chunk-TQNGNEVG.js";
import "./chunk-MKMSK5SE.js";
import "./chunk-MIXJTXLN.js";
import "./chunk-KJANOWRW.js";
import "./chunk-KNHEOVL3.js";
import "./chunk-LCW5JCSY.js";
import "./chunk-2R2KQPMU.js";
import {
  productsQueryKeys
} from "./chunk-VPS36GDL.js";
import {
  queryClient
} from "./chunk-KZEAZRGV.js";
import "./chunk-S7K3MYSB.js";
import {
  sdk
} from "./chunk-IW7FFK4D.js";
import {
  useTranslation
} from "./chunk-FSQ44SVG.js";
import "./chunk-WPKD3INM.js";
import {
  Link,
  useLoaderData,
  useNavigate,
  useParams
} from "./chunk-2WRJVAK6.js";
import {
  Button,
  Checkbox,
  Container,
  Heading,
  PencilSquare,
  Text,
  Trash,
  createColumnHelper,
  toast,
  usePrompt
} from "./chunk-CVCKA5P5.js";
import "./chunk-NOBDUI2K.js";
import "./chunk-VARPEBF3.js";
import "./chunk-FZZ47AFW.js";
import {
  require_jsx_runtime
} from "./chunk-JURSM5AU.js";
import {
  require_react
} from "./chunk-ZP5CUZDC.js";
import "./chunk-HSPO6A2T.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@medusajs/dashboard/dist/customer-group-detail-6LMMTO5B.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var CUSTOMER_GROUP_DETAIL_FIELDS = "+customers.id";
var CustomerGroupDetailBreadcrumb = (props) => {
  const { id } = props.params || {};
  const { customer_group } = useCustomerGroup(
    id,
    {
      fields: CUSTOMER_GROUP_DETAIL_FIELDS
    },
    {
      initialData: props.data,
      enabled: Boolean(id)
    }
  );
  if (!customer_group) {
    return null;
  }
  return (0, import_jsx_runtime.jsx)("span", { children: customer_group.name });
};
var PAGE_SIZE = 10;
var CustomerGroupCustomerSection = ({
  group
}) => {
  const [rowSelection, setRowSelection] = (0, import_react.useState)({});
  const { t } = useTranslation();
  const prompt = usePrompt();
  const { searchParams, raw } = useCustomerTableQuery({ pageSize: PAGE_SIZE });
  const { customers, count, isLoading, isError, error } = useCustomers({
    ...searchParams,
    groups: group.id
  });
  const columns = useColumns();
  const filters = useCustomerTableFilters(["groups"]);
  const { table } = useDataTable({
    data: customers ?? [],
    columns,
    count,
    getRowId: (row) => row.id,
    enablePagination: true,
    enableRowSelection: true,
    pageSize: PAGE_SIZE,
    rowSelection: {
      state: rowSelection,
      updater: setRowSelection
    },
    meta: {
      customerGroupId: group.id
    }
  });
  if (isError) {
    throw error;
  }
  const { mutateAsync } = useRemoveCustomersFromGroup(group.id);
  const handleRemove = async () => {
    const keys = Object.keys(rowSelection);
    const res = await prompt({
      title: t("customerGroups.customers.remove.title", {
        count: keys.length
      }),
      description: t("customerGroups.customers.remove.description", {
        count: keys.length
      }),
      confirmText: t("actions.continue"),
      cancelText: t("actions.cancel")
    });
    if (!res) {
      return;
    }
    await mutateAsync(keys, {
      onSuccess: () => {
        setRowSelection({});
      }
    });
  };
  return (0, import_jsx_runtime2.jsxs)(Container, { className: "divide-y p-0", children: [
    (0, import_jsx_runtime2.jsxs)("div", { className: "flex items-center justify-between px-6 py-4", children: [
      (0, import_jsx_runtime2.jsx)(Heading, { level: "h2", children: t("customers.domain") }),
      (0, import_jsx_runtime2.jsx)(Link, { to: `/customer-groups/${group.id}/add-customers`, children: (0, import_jsx_runtime2.jsx)(Button, { variant: "secondary", size: "small", children: t("general.add") }) })
    ] }),
    (0, import_jsx_runtime2.jsx)(
      _DataTable,
      {
        table,
        columns,
        pageSize: PAGE_SIZE,
        isLoading,
        count,
        navigateTo: (row) => `/customers/${row.id}`,
        filters,
        search: true,
        pagination: true,
        orderBy: [
          { key: "email", label: t("fields.email") },
          { key: "first_name", label: t("fields.firstName") },
          { key: "last_name", label: t("fields.lastName") },
          { key: "has_account", label: t("customers.hasAccount") },
          { key: "created_at", label: t("fields.createdAt") },
          { key: "updated_at", label: t("fields.updatedAt") }
        ],
        queryObject: raw,
        commands: [
          {
            action: handleRemove,
            label: t("actions.remove"),
            shortcut: "r"
          }
        ],
        noRecords: {
          message: t("customerGroups.customers.list.noRecordsMessage")
        }
      }
    )
  ] });
};
var CustomerActions = ({
  customer,
  customerGroupId
}) => {
  const { t } = useTranslation();
  const { mutateAsync } = useRemoveCustomersFromGroup(customerGroupId);
  const prompt = usePrompt();
  const handleRemove = async () => {
    const res = await prompt({
      title: t("customerGroups.customers.remove.title", {
        count: 1
      }),
      description: t("customerGroups.customers.remove.description", {
        count: 1
      }),
      confirmText: t("actions.continue"),
      cancelText: t("actions.cancel")
    });
    if (!res) {
      return;
    }
    await mutateAsync([customer.id]);
  };
  return (0, import_jsx_runtime2.jsx)(
    ActionMenu,
    {
      groups: [
        {
          actions: [
            {
              icon: (0, import_jsx_runtime2.jsx)(PencilSquare, {}),
              label: t("actions.edit"),
              to: `/customers/${customer.id}/edit`
            }
          ]
        },
        {
          actions: [
            {
              icon: (0, import_jsx_runtime2.jsx)(Trash, {}),
              label: t("actions.remove"),
              onClick: handleRemove
            }
          ]
        }
      ]
    }
  );
};
var columnHelper = createColumnHelper();
var useColumns = () => {
  const columns = useCustomerTableColumns();
  return (0, import_react.useMemo)(
    () => [
      columnHelper.display({
        id: "select",
        header: ({ table }) => {
          return (0, import_jsx_runtime2.jsx)(
            Checkbox,
            {
              checked: table.getIsSomePageRowsSelected() ? "indeterminate" : table.getIsAllPageRowsSelected(),
              onCheckedChange: (value) => table.toggleAllPageRowsSelected(!!value)
            }
          );
        },
        cell: ({ row }) => {
          return (0, import_jsx_runtime2.jsx)(
            Checkbox,
            {
              checked: row.getIsSelected(),
              onCheckedChange: (value) => row.toggleSelected(!!value),
              onClick: (e) => {
                e.stopPropagation();
              }
            }
          );
        }
      }),
      ...columns,
      columnHelper.display({
        id: "actions",
        cell: ({ row, table }) => {
          const { customerGroupId } = table.options.meta;
          return (0, import_jsx_runtime2.jsx)(
            CustomerActions,
            {
              customer: row.original,
              customerGroupId
            }
          );
        }
      })
    ],
    [columns]
  );
};
var CustomerGroupGeneralSection = ({
  group
}) => {
  var _a;
  const { t } = useTranslation();
  const prompt = usePrompt();
  const navigate = useNavigate();
  const { mutateAsync } = useDeleteCustomerGroup(group.id);
  const handleDelete = async () => {
    const res = await prompt({
      title: t("customerGroups.delete.title"),
      description: t("customerGroups.delete.description", {
        name: group.name
      }),
      confirmText: t("actions.delete"),
      cancelText: t("actions.cancel")
    });
    if (!res) {
      return;
    }
    await mutateAsync(void 0, {
      onSuccess: () => {
        toast.success(
          t("customerGroups.delete.successToast", {
            name: group.name
          })
        );
        navigate("/customer-groups", { replace: true });
      },
      onError: (error) => {
        toast.error(error.message);
      }
    });
  };
  return (0, import_jsx_runtime3.jsxs)(Container, { className: "divide-y p-0", children: [
    (0, import_jsx_runtime3.jsxs)("div", { className: "flex items-center justify-between px-6 py-4", children: [
      (0, import_jsx_runtime3.jsx)(Heading, { children: group.name }),
      (0, import_jsx_runtime3.jsx)(
        ActionMenu,
        {
          groups: [
            {
              actions: [
                {
                  icon: (0, import_jsx_runtime3.jsx)(PencilSquare, {}),
                  label: t("actions.edit"),
                  to: `/customer-groups/${group.id}/edit`
                }
              ]
            },
            {
              actions: [
                {
                  icon: (0, import_jsx_runtime3.jsx)(Trash, {}),
                  label: t("actions.delete"),
                  onClick: handleDelete
                }
              ]
            }
          ]
        }
      )
    ] }),
    (0, import_jsx_runtime3.jsxs)("div", { className: "text-ui-fg-subtle grid grid-cols-2 items-center px-6 py-4", children: [
      (0, import_jsx_runtime3.jsx)(Text, { size: "small", leading: "compact", weight: "plus", children: t("customers.domain") }),
      (0, import_jsx_runtime3.jsx)(Text, { size: "small", leading: "compact", children: ((_a = group.customers) == null ? void 0 : _a.length) || "-" })
    ] })
  ] });
};
var CustomerGroupDetail = () => {
  const initialData = useLoaderData();
  const { id } = useParams();
  const { customer_group, isLoading, isError, error } = useCustomerGroup(
    id,
    {
      fields: CUSTOMER_GROUP_DETAIL_FIELDS
    },
    { initialData }
  );
  const { getWidgets } = useDashboardExtension();
  if (isLoading || !customer_group) {
    return (0, import_jsx_runtime4.jsx)(SingleColumnPageSkeleton, { sections: 2, showJSON: true, showMetadata: true });
  }
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime4.jsxs)(
    SingleColumnPage,
    {
      widgets: {
        before: getWidgets("customer_group.details.before"),
        after: getWidgets("customer_group.details.after")
      },
      showJSON: true,
      showMetadata: true,
      data: customer_group,
      children: [
        (0, import_jsx_runtime4.jsx)(CustomerGroupGeneralSection, { group: customer_group }),
        (0, import_jsx_runtime4.jsx)(CustomerGroupCustomerSection, { group: customer_group })
      ]
    }
  );
};
var customerGroupDetailQuery = (id) => ({
  queryKey: productsQueryKeys.detail(id),
  queryFn: async () => sdk.admin.customerGroup.retrieve(id, {
    fields: CUSTOMER_GROUP_DETAIL_FIELDS
  })
});
var customerGroupLoader = async ({ params }) => {
  const id = params.id;
  const query = customerGroupDetailQuery(id);
  return queryClient.ensureQueryData(query);
};
export {
  CustomerGroupDetailBreadcrumb as Breadcrumb,
  CustomerGroupDetail as Component,
  customerGroupLoader as loader
};
//# sourceMappingURL=customer-group-detail-6LMMTO5B-KHDMMXEG.js.map
