import {
  INVENTORY_ITEM_IDS_KEY
} from "./chunk-EIIIXC75.js";
import {
  DataGridTogglableNumberCell
} from "./chunk-FSXIXXBB.js";
import {
  DataGrid,
  DataGridReadonlyCell,
  createDataGridHelper
} from "./chunk-4HFYD35M.js";
import "./chunk-55MYIBGD.js";
import {
  castNumber
} from "./chunk-LKYIPMJI.js";
import "./chunk-EGRHWZRV.js";
import {
  KeyboundForm
} from "./chunk-H3QLNIQZ.js";
import "./chunk-X5HQAIV7.js";
import {
  RouteFocusModal,
  useRouteModal
} from "./chunk-LJDFKMOG.js";
import "./chunk-LDWUUPO4.js";
import "./chunk-YY5JNEZV.js";
import {
  t
} from "./chunk-OHTJOGDW.js";
import {
  z
} from "./chunk-UESAM5J2.js";
import "./chunk-FURIVWWB.js";
import "./chunk-XAMQAMS2.js";
import "./chunk-24AYSH5Z.js";
import "./chunk-Y7E3AKSU.js";
import "./chunk-P42N2CVA.js";
import "./chunk-JQ6JHQYV.js";
import "./chunk-2NKA7EPO.js";
import "./chunk-H5XEUC57.js";
import "./chunk-CD3UWPTR.js";
import "./chunk-JC3AABXJ.js";
import "./chunk-UVYZXJCZ.js";
import "./chunk-AJKOBEGU.js";
import "./chunk-EFTJBWZH.js";
import "./chunk-KKXPEDCK.js";
import "./chunk-QRVRA7WJ.js";
import "./chunk-F6XLLSP3.js";
import "./chunk-QREZ47SH.js";
import "./chunk-AFW6PFDV.js";
import "./chunk-2HIWKKOO.js";
import "./chunk-BI7OZFOQ.js";
import {
  useStockLocations
} from "./chunk-3CFLC4RY.js";
import "./chunk-TQNGNEVG.js";
import "./chunk-MKMSK5SE.js";
import "./chunk-MIXJTXLN.js";
import "./chunk-KJANOWRW.js";
import "./chunk-KNHEOVL3.js";
import "./chunk-LCW5JCSY.js";
import "./chunk-2R2KQPMU.js";
import {
  useBatchInventoryItemsLocationLevels,
  useInventoryItems
} from "./chunk-VPS36GDL.js";
import "./chunk-KZEAZRGV.js";
import "./chunk-S7K3MYSB.js";
import {
  useForm
} from "./chunk-IW7FFK4D.js";
import {
  useTranslation
} from "./chunk-FSQ44SVG.js";
import "./chunk-WPKD3INM.js";
import {
  useSearchParams
} from "./chunk-2WRJVAK6.js";
import {
  Button,
  toast
} from "./chunk-CVCKA5P5.js";
import "./chunk-NOBDUI2K.js";
import "./chunk-VARPEBF3.js";
import "./chunk-FZZ47AFW.js";
import {
  require_jsx_runtime
} from "./chunk-JURSM5AU.js";
import {
  require_react
} from "./chunk-ZP5CUZDC.js";
import "./chunk-HSPO6A2T.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@medusajs/dashboard/dist/inventory-stock-EY6WJQVY.mjs
var import_react = __toESM(require_react(), 1);
var import_react2 = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var helper = createDataGridHelper();
var useInventoryStockColumns = (locations = []) => {
  const { t: t2 } = useTranslation();
  return (0, import_react2.useMemo)(
    () => [
      helper.column({
        id: "title",
        name: "Title",
        header: "Title",
        cell: (context) => {
          const item = context.row.original;
          return (0, import_jsx_runtime.jsx)(DataGridReadonlyCell, { context, color: "normal", children: (0, import_jsx_runtime.jsx)("span", { title: item.title || void 0, children: item.title || "-" }) });
        },
        disableHiding: true
      }),
      helper.column({
        id: "sku",
        name: "SKU",
        header: "SKU",
        cell: (context) => {
          const item = context.row.original;
          return (0, import_jsx_runtime.jsx)(DataGridReadonlyCell, { context, color: "normal", children: (0, import_jsx_runtime.jsx)("span", { title: item.sku || void 0, children: item.sku || "-" }) });
        },
        disableHiding: true
      }),
      ...locations.map(
        (location) => helper.column({
          id: `location_${location.id}`,
          name: location.name,
          header: location.name,
          field: (context) => {
            const item = context.row.original;
            return `inventory_items.${item.id}.locations.${location.id}`;
          },
          type: "togglable-number",
          cell: (context) => {
            return (0, import_jsx_runtime.jsx)(
              DataGridTogglableNumberCell,
              {
                context,
                disabledToggleTooltip: t2(
                  "inventory.stock.disabledToggleTooltip"
                )
              }
            );
          }
        })
      )
    ],
    [locations, t2]
  );
};
var LocationQuantitySchema = z.object({
  id: z.string().optional(),
  quantity: z.union([z.number(), z.string()]),
  checked: z.boolean(),
  disabledToggle: z.boolean()
});
var InventoryLocationsSchema = z.record(LocationQuantitySchema);
var InventoryItemSchema = z.object({
  locations: InventoryLocationsSchema
});
var InventoryStockSchema = z.object({
  inventory_items: z.record(InventoryItemSchema)
});
var InventoryStockForm = ({
  items,
  locations
}) => {
  const { t: t2 } = useTranslation();
  const { setCloseOnEscape, handleSuccess } = useRouteModal();
  const initialValues = (0, import_react.useRef)(getDefaultValues(items, locations));
  console.log("initialValues", initialValues.current);
  const form = useForm({
    defaultValues: getDefaultValues(items, locations),
    resolver: t(InventoryStockSchema)
  });
  const columns = useInventoryStockColumns(locations);
  const { mutateAsync, isPending } = useBatchInventoryItemsLocationLevels();
  const onSubmit = form.handleSubmit(async (data) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
    const payload = {
      create: [],
      update: [],
      delete: [],
      force: true
    };
    for (const [inventory_item_id, item] of Object.entries(
      data.inventory_items
    )) {
      for (const [location_id, level] of Object.entries(item.locations)) {
        if (level.id) {
          const wasChecked = (_e = (_d = (_c = (_b = (_a = initialValues.current) == null ? void 0 : _a.inventory_items) == null ? void 0 : _b[inventory_item_id]) == null ? void 0 : _c.locations) == null ? void 0 : _d[location_id]) == null ? void 0 : _e.checked;
          if (wasChecked && !level.checked) {
            payload.delete.push(level.id);
          } else {
            const newQuantity = level.quantity !== "" ? castNumber(level.quantity) : 0;
            const originalQuantity = (_j = (_i = (_h = (_g = (_f = initialValues.current) == null ? void 0 : _f.inventory_items) == null ? void 0 : _g[inventory_item_id]) == null ? void 0 : _h.locations) == null ? void 0 : _i[location_id]) == null ? void 0 : _j.quantity;
            if (newQuantity !== originalQuantity) {
              payload.update.push({
                id: level.id,
                inventory_item_id,
                location_id,
                stocked_quantity: newQuantity
              });
            }
          }
        }
        if (!level.id && level.quantity !== "") {
          payload.create.push({
            inventory_item_id,
            location_id,
            stocked_quantity: castNumber(level.quantity)
          });
        }
      }
    }
    await mutateAsync(payload, {
      onSuccess: () => {
        toast.success(t2("inventory.stock.successToast"));
        handleSuccess();
      },
      onError: (error) => {
        toast.error(error.message);
      }
    });
  });
  return (0, import_jsx_runtime2.jsx)(RouteFocusModal.Form, { form, children: (0, import_jsx_runtime2.jsxs)(KeyboundForm, { onSubmit, className: "flex size-full flex-col", children: [
    (0, import_jsx_runtime2.jsx)(RouteFocusModal.Header, {}),
    (0, import_jsx_runtime2.jsx)(RouteFocusModal.Body, { className: "size-full flex-1 overflow-y-auto", children: (0, import_jsx_runtime2.jsx)(
      DataGrid,
      {
        columns,
        data: items,
        state: form,
        onEditingChange: (editing) => {
          setCloseOnEscape(!editing);
        }
      }
    ) }),
    (0, import_jsx_runtime2.jsx)(RouteFocusModal.Footer, { children: (0, import_jsx_runtime2.jsxs)("div", { className: "flex items-center justify-end gap-2", children: [
      (0, import_jsx_runtime2.jsx)(RouteFocusModal.Close, { asChild: true, children: (0, import_jsx_runtime2.jsx)(Button, { variant: "secondary", size: "small", type: "button", children: t2("actions.cancel") }) }),
      (0, import_jsx_runtime2.jsx)(Button, { type: "submit", size: "small", isLoading: isPending, children: t2("actions.save") })
    ] }) })
  ] }) });
};
function getDefaultValues(items, locations) {
  return {
    inventory_items: items.reduce((acc, item) => {
      const locationsMap = locations.reduce((locationAcc, location) => {
        var _a;
        const level = (_a = item.location_levels) == null ? void 0 : _a.find(
          (level2) => level2.location_id === location.id
        );
        locationAcc[location.id] = {
          id: level == null ? void 0 : level.id,
          quantity: typeof (level == null ? void 0 : level.stocked_quantity) === "number" ? level == null ? void 0 : level.stocked_quantity : "",
          checked: !!level,
          disabledToggle: ((level == null ? void 0 : level.incoming_quantity) || 0) > 0 || ((level == null ? void 0 : level.reserved_quantity) || 0) > 0
        };
        return locationAcc;
      }, {});
      acc[item.id] = { locations: locationsMap };
      return acc;
    }, {})
  };
}
var InventoryStock = () => {
  var _a;
  const { t: t2 } = useTranslation();
  const [searchParams] = useSearchParams();
  const inventoryItemIds = ((_a = searchParams.get(INVENTORY_ITEM_IDS_KEY)) == null ? void 0 : _a.split(",")) || void 0;
  const { inventory_items, isPending, isError, error } = useInventoryItems({
    id: inventoryItemIds
  });
  const {
    stock_locations,
    isPending: isPendingStockLocations,
    isError: isErrorStockLocations,
    error: errorStockLocations
  } = useStockLocations({
    limit: 9999,
    fields: "id,name"
  });
  const ready = !isPending && !!inventory_items && !isPendingStockLocations && !!stock_locations;
  if (isError) {
    throw error;
  }
  if (isErrorStockLocations) {
    throw errorStockLocations;
  }
  return (0, import_jsx_runtime3.jsxs)(RouteFocusModal, { children: [
    (0, import_jsx_runtime3.jsx)(RouteFocusModal.Title, { asChild: true, children: (0, import_jsx_runtime3.jsx)("span", { className: "sr-only", children: t2("inventory.stock.title") }) }),
    (0, import_jsx_runtime3.jsx)(RouteFocusModal.Description, { asChild: true, children: (0, import_jsx_runtime3.jsx)("span", { className: "sr-only", children: t2("inventory.stock.description") }) }),
    ready && (0, import_jsx_runtime3.jsx)(
      InventoryStockForm,
      {
        items: inventory_items,
        locations: stock_locations
      }
    )
  ] });
};
export {
  InventoryStock as Component
};
//# sourceMappingURL=inventory-stock-EY6WJQVY-KDTS5O7B.js.map
