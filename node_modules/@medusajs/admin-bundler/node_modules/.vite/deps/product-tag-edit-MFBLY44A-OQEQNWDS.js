import "./chunk-EGRHWZRV.js";
import {
  KeyboundForm
} from "./chunk-H3QLNIQZ.js";
import {
  RouteDrawer,
  useRouteModal
} from "./chunk-LJDFKMOG.js";
import {
  t
} from "./chunk-OHTJOGDW.js";
import {
  z
} from "./chunk-UESAM5J2.js";
import {
  useProductTag,
  useUpdateProductTag
} from "./chunk-24AYSH5Z.js";
import "./chunk-Y7E3AKSU.js";
import "./chunk-P42N2CVA.js";
import "./chunk-JQ6JHQYV.js";
import "./chunk-2NKA7EPO.js";
import "./chunk-H5XEUC57.js";
import "./chunk-CD3UWPTR.js";
import "./chunk-JC3AABXJ.js";
import "./chunk-UVYZXJCZ.js";
import "./chunk-AJKOBEGU.js";
import "./chunk-EFTJBWZH.js";
import "./chunk-KKXPEDCK.js";
import "./chunk-QRVRA7WJ.js";
import "./chunk-F6XLLSP3.js";
import "./chunk-QREZ47SH.js";
import "./chunk-AFW6PFDV.js";
import "./chunk-2HIWKKOO.js";
import "./chunk-BI7OZFOQ.js";
import "./chunk-3CFLC4RY.js";
import "./chunk-TQNGNEVG.js";
import "./chunk-MKMSK5SE.js";
import "./chunk-MIXJTXLN.js";
import "./chunk-KJANOWRW.js";
import "./chunk-KNHEOVL3.js";
import "./chunk-LCW5JCSY.js";
import "./chunk-2R2KQPMU.js";
import "./chunk-VPS36GDL.js";
import "./chunk-KZEAZRGV.js";
import "./chunk-S7K3MYSB.js";
import {
  Form,
  useForm
} from "./chunk-IW7FFK4D.js";
import {
  useTranslation
} from "./chunk-FSQ44SVG.js";
import "./chunk-WPKD3INM.js";
import {
  useParams
} from "./chunk-2WRJVAK6.js";
import {
  Button,
  Heading,
  Input,
  toast
} from "./chunk-CVCKA5P5.js";
import "./chunk-NOBDUI2K.js";
import "./chunk-VARPEBF3.js";
import "./chunk-FZZ47AFW.js";
import {
  require_jsx_runtime
} from "./chunk-JURSM5AU.js";
import "./chunk-ZP5CUZDC.js";
import "./chunk-HSPO6A2T.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@medusajs/dashboard/dist/product-tag-edit-MFBLY44A.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var ProductTagEditSchema = z.object({
  value: z.string().min(1)
});
var ProductTagEditForm = ({ productTag }) => {
  const { t: t2 } = useTranslation();
  const { handleSuccess } = useRouteModal();
  const form = useForm({
    defaultValues: {
      value: productTag.value
    },
    resolver: t(ProductTagEditSchema)
  });
  const { mutateAsync, isPending } = useUpdateProductTag(productTag.id);
  const handleSubmit = form.handleSubmit(async (data) => {
    await mutateAsync(data, {
      onSuccess: ({ product_tag }) => {
        toast.success(
          t2("productTags.edit.successToast", {
            value: product_tag.value
          })
        );
        handleSuccess();
      },
      onError: (error) => {
        toast.error(error.message);
      }
    });
  });
  return (0, import_jsx_runtime.jsx)(RouteDrawer.Form, { form, children: (0, import_jsx_runtime.jsxs)(
    KeyboundForm,
    {
      className: "flex size-full flex-col overflow-hidden",
      onSubmit: handleSubmit,
      children: [
        (0, import_jsx_runtime.jsx)(RouteDrawer.Body, { className: "flex flex-1 flex-col overflow-auto", children: (0, import_jsx_runtime.jsx)(
          Form.Field,
          {
            control: form.control,
            name: "value",
            render: ({ field }) => {
              return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
                (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("productTags.fields.value") }),
                (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(Input, { ...field }) }),
                (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
              ] });
            }
          }
        ) }),
        (0, import_jsx_runtime.jsx)(RouteDrawer.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
          (0, import_jsx_runtime.jsx)(RouteDrawer.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { variant: "secondary", size: "small", type: "button", children: t2("actions.cancel") }) }),
          (0, import_jsx_runtime.jsx)(Button, { size: "small", type: "submit", isLoading: isPending, children: t2("actions.save") })
        ] }) })
      ]
    }
  ) });
};
var ProductTagEdit = () => {
  const { id } = useParams();
  const { t: t2 } = useTranslation();
  const { product_tag, isPending, isError, error } = useProductTag(id);
  const ready = !isPending && !!product_tag;
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime2.jsxs)(RouteDrawer, { children: [
    (0, import_jsx_runtime2.jsxs)(RouteDrawer.Header, { children: [
      (0, import_jsx_runtime2.jsx)(RouteDrawer.Title, { asChild: true, children: (0, import_jsx_runtime2.jsx)(Heading, { children: t2("productTags.edit.header") }) }),
      (0, import_jsx_runtime2.jsx)(RouteDrawer.Description, { className: "sr-only", children: t2("productTags.edit.subtitle") })
    ] }),
    ready && (0, import_jsx_runtime2.jsx)(ProductTagEditForm, { productTag: product_tag })
  ] });
};
export {
  ProductTagEdit as Component
};
//# sourceMappingURL=product-tag-edit-MFBLY44A-OQEQNWDS.js.map
