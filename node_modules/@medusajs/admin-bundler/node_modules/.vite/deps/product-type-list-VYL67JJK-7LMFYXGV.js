import {
  useDeleteProductTypeAction
} from "./chunk-JG37YCLL.js";
import {
  useProductTypeTableColumns
} from "./chunk-3QLPVMPO.js";
import "./chunk-4TMSYWXC.js";
import "./chunk-2LD36FQJ.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-Z7JNCSGP.js";
import {
  _DataTable,
  useDataTable
} from "./chunk-GYOCVU6S.js";
import "./chunk-OG2R6DAC.js";
import "./chunk-A2UEZFN2.js";
import "./chunk-K7PZIJFD.js";
import {
  SingleColumnPage
} from "./chunk-VTZEQD5S.js";
import {
  useProductTypeTableQuery
} from "./chunk-AG6S44LT.js";
import {
  useProductTypeTableFilters
} from "./chunk-AB7TWJ4O.js";
import "./chunk-ZPMIOCCF.js";
import "./chunk-GZ6THSPN.js";
import "./chunk-ZXVW7VE7.js";
import "./chunk-X5HQAIV7.js";
import "./chunk-LNH4KKOB.js";
import "./chunk-PWUDRQ7V.js";
import "./chunk-YY5JNEZV.js";
import {
  useDashboardExtension
} from "./chunk-MBDSCVP3.js";
import "./chunk-TDDTFEZU.js";
import "./chunk-OHTJOGDW.js";
import "./chunk-UESAM5J2.js";
import {
  ActionMenu
} from "./chunk-EX7ZLLWN.js";
import "./chunk-FURIVWWB.js";
import "./chunk-R435OOKX.js";
import "./chunk-O2SHVWJ7.js";
import "./chunk-QJMXPFFL.js";
import "./chunk-LOUCI2Q4.js";
import "./chunk-XAMQAMS2.js";
import "./chunk-ROURSU5C.js";
import {
  useProductTypes
} from "./chunk-H5XEUC57.js";
import "./chunk-KZEAZRGV.js";
import "./chunk-S7K3MYSB.js";
import "./chunk-IW7FFK4D.js";
import {
  useTranslation
} from "./chunk-FSQ44SVG.js";
import "./chunk-WPKD3INM.js";
import {
  Link
} from "./chunk-2WRJVAK6.js";
import {
  Button,
  Container,
  Heading,
  PencilSquare,
  Text,
  Trash,
  createColumnHelper
} from "./chunk-CVCKA5P5.js";
import "./chunk-NOBDUI2K.js";
import "./chunk-VARPEBF3.js";
import {
  keepPreviousData
} from "./chunk-FZZ47AFW.js";
import {
  require_jsx_runtime
} from "./chunk-JURSM5AU.js";
import {
  require_react
} from "./chunk-ZP5CUZDC.js";
import "./chunk-HSPO6A2T.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@medusajs/dashboard/dist/product-type-list-VYL67JJK.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var ProductTypeRowActions = ({
  productType
}) => {
  const { t } = useTranslation();
  const handleDelete = useDeleteProductTypeAction(productType.id);
  return (0, import_jsx_runtime.jsx)(
    ActionMenu,
    {
      groups: [
        {
          actions: [
            {
              label: t("actions.edit"),
              icon: (0, import_jsx_runtime.jsx)(PencilSquare, {}),
              to: `/settings/product-types/${productType.id}/edit`
            }
          ]
        },
        {
          actions: [
            {
              label: t("actions.delete"),
              icon: (0, import_jsx_runtime.jsx)(Trash, {}),
              onClick: handleDelete
            }
          ]
        }
      ]
    }
  );
};
var PAGE_SIZE = 20;
var ProductTypeListTable = () => {
  const { t } = useTranslation();
  const { searchParams, raw } = useProductTypeTableQuery({
    pageSize: PAGE_SIZE
  });
  const { product_types, count, isLoading, isError, error } = useProductTypes(
    searchParams,
    {
      placeholderData: keepPreviousData
    }
  );
  const filters = useProductTypeTableFilters();
  const columns = useColumns();
  const { table } = useDataTable({
    columns,
    data: product_types,
    count,
    getRowId: (row) => row.id,
    pageSize: PAGE_SIZE
  });
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime2.jsxs)(Container, { className: "divide-y p-0", children: [
    (0, import_jsx_runtime2.jsxs)("div", { className: "flex items-center justify-between px-6 py-4", children: [
      (0, import_jsx_runtime2.jsxs)("div", { children: [
        (0, import_jsx_runtime2.jsx)(Heading, { children: t("productTypes.domain") }),
        (0, import_jsx_runtime2.jsx)(Text, { className: "text-ui-fg-subtle", size: "small", children: t("productTypes.subtitle") })
      ] }),
      (0, import_jsx_runtime2.jsx)(Button, { size: "small", variant: "secondary", asChild: true, children: (0, import_jsx_runtime2.jsx)(Link, { to: "create", children: t("actions.create") }) })
    ] }),
    (0, import_jsx_runtime2.jsx)(
      _DataTable,
      {
        table,
        filters,
        isLoading,
        columns,
        pageSize: PAGE_SIZE,
        count,
        orderBy: [
          { key: "value", label: t("fields.value") },
          { key: "created_at", label: t("fields.createdAt") },
          { key: "updated_at", label: t("fields.updatedAt") }
        ],
        navigateTo: ({ original }) => original.id,
        queryObject: raw,
        pagination: true,
        search: true
      }
    )
  ] });
};
var columnHelper = createColumnHelper();
var useColumns = () => {
  const base = useProductTypeTableColumns();
  return (0, import_react.useMemo)(
    () => [
      ...base,
      columnHelper.display({
        id: "actions",
        cell: ({ row }) => {
          return (0, import_jsx_runtime2.jsx)(ProductTypeRowActions, { productType: row.original });
        }
      })
    ],
    [base]
  );
};
var ProductTypeList = () => {
  const { getWidgets } = useDashboardExtension();
  return (0, import_jsx_runtime3.jsx)(
    SingleColumnPage,
    {
      widgets: {
        after: getWidgets("product_type.list.after"),
        before: getWidgets("product_type.list.before")
      },
      children: (0, import_jsx_runtime3.jsx)(ProductTypeListTable, {})
    }
  );
};
export {
  ProductTypeList as Component
};
//# sourceMappingURL=product-type-list-VYL67JJK-7LMFYXGV.js.map
