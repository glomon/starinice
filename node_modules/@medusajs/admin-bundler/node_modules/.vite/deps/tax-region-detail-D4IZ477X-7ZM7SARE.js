import {
  TaxOverrideTable,
  TaxRateLine,
  useTaxOverrideTable
} from "./chunk-652ULMDQ.js";
import {
  TaxRegionTable,
  useTaxRegionTable
} from "./chunk-OE2MUSDD.js";
import {
  TaxRegionCard
} from "./chunk-EBDYETCD.js";
import {
  getCountryProvinceObjectByIso2
} from "./chunk-OKFW32RV.js";
import "./chunk-527OTH74.js";
import "./chunk-JS2IEJXU.js";
import "./chunk-UG27ZBNP.js";
import "./chunk-XYUR3BK3.js";
import "./chunk-OG2R6DAC.js";
import "./chunk-A2UEZFN2.js";
import "./chunk-K7PZIJFD.js";
import {
  SingleColumnPage
} from "./chunk-VTZEQD5S.js";
import {
  useTaxRateTableQuery
} from "./chunk-QTT2ZGSW.js";
import {
  useTaxRegionTableQuery
} from "./chunk-6ZGSJKHL.js";
import "./chunk-ZXVW7VE7.js";
import "./chunk-LNH4KKOB.js";
import {
  TaxRegionDetailBreadcrumb,
  taxRegionLoader
} from "./chunk-5MABHREF.js";
import "./chunk-PCCLBZD7.js";
import {
  SingleColumnPageSkeleton
} from "./chunk-YY5JNEZV.js";
import {
  useDashboardExtension
} from "./chunk-MBDSCVP3.js";
import "./chunk-TDDTFEZU.js";
import "./chunk-OHTJOGDW.js";
import "./chunk-UESAM5J2.js";
import "./chunk-EX7ZLLWN.js";
import "./chunk-FURIVWWB.js";
import "./chunk-24AYSH5Z.js";
import "./chunk-Y7E3AKSU.js";
import {
  useTaxRates
} from "./chunk-P42N2CVA.js";
import {
  useTaxRegion,
  useTaxRegions
} from "./chunk-JQ6JHQYV.js";
import "./chunk-2NKA7EPO.js";
import "./chunk-H5XEUC57.js";
import "./chunk-CD3UWPTR.js";
import "./chunk-JC3AABXJ.js";
import "./chunk-UVYZXJCZ.js";
import "./chunk-AJKOBEGU.js";
import "./chunk-EFTJBWZH.js";
import "./chunk-KKXPEDCK.js";
import "./chunk-QRVRA7WJ.js";
import "./chunk-F6XLLSP3.js";
import "./chunk-QREZ47SH.js";
import "./chunk-AFW6PFDV.js";
import "./chunk-2HIWKKOO.js";
import "./chunk-BI7OZFOQ.js";
import "./chunk-3CFLC4RY.js";
import "./chunk-TQNGNEVG.js";
import "./chunk-MKMSK5SE.js";
import "./chunk-MIXJTXLN.js";
import "./chunk-KJANOWRW.js";
import "./chunk-KNHEOVL3.js";
import "./chunk-LCW5JCSY.js";
import "./chunk-2R2KQPMU.js";
import "./chunk-VPS36GDL.js";
import "./chunk-KZEAZRGV.js";
import "./chunk-S7K3MYSB.js";
import "./chunk-IW7FFK4D.js";
import {
  useTranslation
} from "./chunk-FSQ44SVG.js";
import "./chunk-WPKD3INM.js";
import {
  useLoaderData,
  useParams
} from "./chunk-2WRJVAK6.js";
import {
  Alert,
  Badge,
  Button,
  Container,
  Heading,
  Text,
  Tooltip
} from "./chunk-CVCKA5P5.js";
import "./chunk-NOBDUI2K.js";
import "./chunk-VARPEBF3.js";
import {
  keepPreviousData
} from "./chunk-FZZ47AFW.js";
import {
  require_jsx_runtime
} from "./chunk-JURSM5AU.js";
import {
  require_react
} from "./chunk-ZP5CUZDC.js";
import "./chunk-HSPO6A2T.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@medusajs/dashboard/dist/tax-region-detail-D4IZ477X.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var import_react2 = __toESM(require_react(), 1);
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var TaxRegionDetailSection = ({
  taxRegion
}) => {
  const { t } = useTranslation();
  const defaultRates = taxRegion.tax_rates.filter((r) => r.is_default === true);
  const showBage = defaultRates.length === 0;
  return (0, import_jsx_runtime.jsxs)(Container, { className: "divide-y p-0", children: [
    (0, import_jsx_runtime.jsx)(
      TaxRegionCard,
      {
        taxRegion,
        type: "header",
        asLink: false,
        badge: showBage && (0, import_jsx_runtime.jsx)(Tooltip, { content: t("taxRegions.fields.noDefaultRate.tooltip"), children: (0, import_jsx_runtime.jsx)(Badge, { color: "orange", size: "2xsmall", className: "cursor-default", children: t("taxRegions.fields.noDefaultRate.label") }) })
      }
    ),
    defaultRates.map((rate) => {
      return (0, import_jsx_runtime.jsx)(TaxRateLine, { taxRate: rate }, rate.id);
    })
  ] });
};
var PAGE_SIZE = 10;
var PREFIX = "p";
var TaxRegionProvinceSection = ({
  taxRegion,
  showSublevelRegions
}) => {
  const { t } = useTranslation();
  const { searchParams, raw } = useTaxRegionTableQuery({
    pageSize: PAGE_SIZE,
    prefix: PREFIX
  });
  const { tax_regions, count, isPending, isError, error } = useTaxRegions(
    {
      ...searchParams,
      parent_id: taxRegion.id
    },
    {
      placeholderData: keepPreviousData
    }
  );
  const { table } = useTaxRegionTable({
    count,
    data: tax_regions,
    pageSize: PAGE_SIZE,
    prefix: PREFIX
  });
  const provinceObject = getCountryProvinceObjectByIso2(taxRegion.country_code);
  if (!provinceObject && !showSublevelRegions && !taxRegion.children.length) {
    return null;
  }
  const type = (provinceObject == null ? void 0 : provinceObject.type) || "sublevel";
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime2.jsx)(Container, { className: "divide-y p-0", children: (0, import_jsx_runtime2.jsx)(
    TaxRegionTable,
    {
      variant: "province",
      action: { to: `provinces/create`, label: t("actions.create") },
      table,
      isPending,
      queryObject: raw,
      count,
      children: (0, import_jsx_runtime2.jsx)(Heading, { level: "h2", children: t(`taxRegions.${type}.header`) })
    }
  ) });
};
var PAGE_SIZE2 = 10;
var PREFIX2 = "o";
var TaxRegionOverrideSection = ({
  taxRegion
}) => {
  const { t } = useTranslation();
  const { searchParams, raw } = useTaxRateTableQuery({
    pageSize: PAGE_SIZE2,
    prefix: PREFIX2
  });
  const { tax_rates, count, isPending, isError, error } = useTaxRates(
    {
      ...searchParams,
      tax_region_id: taxRegion.id,
      is_default: false
    },
    {
      placeholderData: keepPreviousData
    }
  );
  const { table } = useTaxOverrideTable({
    count,
    data: tax_rates,
    pageSize: PAGE_SIZE2,
    prefix: PREFIX2
  });
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime3.jsx)(Container, { className: "p-0", children: (0, import_jsx_runtime3.jsx)(
    TaxOverrideTable,
    {
      isPending,
      table,
      count,
      action: {
        label: t("actions.create"),
        to: "overrides/create"
      },
      queryObject: raw,
      prefix: PREFIX2,
      children: (0, import_jsx_runtime3.jsx)(Heading, { level: "h2", children: t("taxRegions.taxOverrides.header") })
    }
  ) });
};
var TaxRegionSublevelAlert = ({
  taxRegion,
  showSublevelRegions,
  setShowSublevelRegions
}) => {
  const { t } = useTranslation();
  const [dismissed, setDismissed] = (0, import_react2.useState)(false);
  const provinceObject = getCountryProvinceObjectByIso2(taxRegion.country_code);
  if (provinceObject || showSublevelRegions || dismissed || taxRegion.children.length) {
    return null;
  }
  return (0, import_jsx_runtime4.jsx)(Alert, { dismissible: true, variant: "info", className: "bg-ui-bg-base", children: (0, import_jsx_runtime4.jsxs)("div", { className: "flex flex-col gap-y-3", children: [
    (0, import_jsx_runtime4.jsxs)("div", { className: "flex flex-col", children: [
      (0, import_jsx_runtime4.jsx)(Text, { size: "small", leading: "compact", weight: "plus", asChild: true, children: (0, import_jsx_runtime4.jsx)("h2", { children: t("taxRegions.fields.sublevels.alert.header") }) }),
      (0, import_jsx_runtime4.jsx)(Text, { size: "small", leading: "compact", className: "text-pretty", children: t("taxRegions.fields.sublevels.alert.description") })
    ] }),
    (0, import_jsx_runtime4.jsxs)("div", { className: "flex items-center gap-x-3", children: [
      (0, import_jsx_runtime4.jsx)(
        Button,
        {
          variant: "secondary",
          size: "small",
          onClick: () => setShowSublevelRegions(true),
          children: t("taxRegions.fields.sublevels.alert.action")
        }
      ),
      (0, import_jsx_runtime4.jsx)(
        Button,
        {
          variant: "transparent",
          size: "small",
          onClick: () => setDismissed(true),
          children: t("actions.hide")
        }
      )
    ] })
  ] }) });
};
var TaxRegionDetail = () => {
  const { id } = useParams();
  const [showSublevelRegions, setShowSublevelRegions] = (0, import_react.useState)(false);
  const initialData = useLoaderData();
  const {
    tax_region: taxRegion,
    isLoading,
    isError,
    error
  } = useTaxRegion(id, void 0, { initialData });
  const { getWidgets } = useDashboardExtension();
  if (isLoading || !taxRegion) {
    return (0, import_jsx_runtime5.jsx)(SingleColumnPageSkeleton, { sections: 4, showJSON: true });
  }
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime5.jsxs)(
    SingleColumnPage,
    {
      data: taxRegion,
      showJSON: true,
      widgets: {
        after: getWidgets("tax.details.after"),
        before: getWidgets("tax.details.before")
      },
      children: [
        (0, import_jsx_runtime5.jsx)(
          TaxRegionSublevelAlert,
          {
            taxRegion,
            showSublevelRegions,
            setShowSublevelRegions
          }
        ),
        (0, import_jsx_runtime5.jsx)(TaxRegionDetailSection, { taxRegion }),
        (0, import_jsx_runtime5.jsx)(
          TaxRegionProvinceSection,
          {
            taxRegion,
            showSublevelRegions
          }
        ),
        (0, import_jsx_runtime5.jsx)(TaxRegionOverrideSection, { taxRegion })
      ]
    }
  );
};
export {
  TaxRegionDetailBreadcrumb as Breadcrumb,
  TaxRegionDetail as Component,
  TaxRegionDetail,
  taxRegionLoader as loader
};
//# sourceMappingURL=tax-region-detail-D4IZ477X-7ZM7SARE.js.map
